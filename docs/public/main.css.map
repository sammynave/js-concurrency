{
  "version": 3,
  "file": "main.css",
  "sources": [
    "../App.html",
    "../src/UsingYield.html",
    "../src/MaxConcurrency.html",
    "../src/Cancel.html",
    "../src/Nav.html"
  ],
  "sourcesContent": [
    "<div class=\"page\">\n  <h1 class=\"title\">js-concurrency</h1>\n\n  <Nav on:change=\"setActive(event)\" {active} {pages} />\n\n  <div class=\"main\">\n    <svelte:component this={active} />\n  </div>\n</div>\n\n<style>\n  .page {\n    display: grid;\n    grid-template-areas:\n      \"title title\"\n      \"nav main\";\n    grid-template-columns: 1fr 4fr;\n\n  }\n\n  .title {\n    grid-area: title;\n  }\n\n  .main {\n    grid-area: main;\n    padding: 0 1em;\n  }\n</style>\n\n\n<script>\n  import BasicExample from './src/BasicExample.html';\n  import UsingYield from './src/UsingYield.html';\n  import MaxConcurrency from './src/MaxConcurrency.html';\n  import Cancel from './src/Cancel.html';\n  import Nav from './src/Nav.html';\n\n  export default {\n    components: {\n      BasicExample,\n      UsingYield,\n      MaxConcurrency,\n      Cancel,\n      Nav\n    },\n\n    methods: {\n      setActive(active) {\n        this.set({ active });\n      }\n    },\n\n    data() {\n      return {\n        active: BasicExample,\n        BasicExample,\n        UsingYield,\n        MaxConcurrency,\n        Cancel,\n        pages: [\n          { component: BasicExample, title: 'Basic example' },\n          { component: UsingYield, title: 'Using Yield' },\n          { component: MaxConcurrency, title: 'Max concurrency' },\n          { component: Cancel, title: 'Canceling' },\n        ]\n      }\n    }\n  }\n</script>\n",
    "<style>\n  .state-list {\n    max-width: 200px;\n    word-wrap: break-word;\n  }\n\n  .state {\n    padding: .25em;\n    font-size: .75rem;\n    display: inline-block;\n  }\n</style>\n\n<h3>using `yield` - fetch random name from faker.io</h3>\n<h4>maxConcurrency = 1; drop = true;</h4>\n\n<div>\n  <div>count: {performCount}</div>\n  <div>task instance status: {taskInstanceState}</div>\n  <div>task status: {taskState}</div>\n  <div>\n    <button on:click=\"click()\">random name</button> fetch random name: {name}\n  </div>\n  <div>\n    <button on:click=\"click(true)\">throw error</button> {error}\n  </div>\n</div>\n\n<div class=\"state-list\">\n  <h4>taskStates</h4>\n  {#each taskStates as state}\n    <span class=\"state\">{state}</span>\n  {/each}\n</div>\n\n<div class=\"state-list\">\n  <h4>taskInstanceStates</h4>\n  {#each taskInstanceStates as state}\n    <span class=\"state\">{state}</span>\n  {/each}\n</div>\n\n<script>\n  import { task } from '../../src/index';\n\n  export default {\n    methods: {\n      click(err) {\n        const { nameTask } = this.get();\n        this.set({ throwError: err });\n        const subscribe = (changed, { state, value }) => {\n            /*\n             * TODO: slightly annoying to push this onto\n             * the user. think of a better way\n             */\n            if (changed.state) {\n              const taskInstanceStates = this.get().taskInstanceStates;\n              this.set({\n                taskInstanceState: state,\n                taskInstanceStates: taskInstanceStates.concat([state])\n              });\n            }\n\n            if (changed.value) {\n              this.set({ name: value });\n            }\n        };\n\n        const getRandomName = nameTask.perform(subscribe);\n\n        this.set({\n          performCount: nameTask.performCount\n        });\n      }\n    },\n\n    data() {\n      return {\n        taskStates: [],\n        taskInstanceStates: []\n      }\n    },\n\n    oncreate() {\n      const ctx = this;\n      const nameTask = task(function *() {\n        if (ctx.get().throwError) {\n          try {\n            const resp = yield fetch('http://somebadurlthatdoesntexist');\n          } catch (e) {\n            ctx.set({ error: e.error });\n          }\n        } else {\n\n          const resp = yield fetch('http://faker.hook.io/?property=name.findName&locale=en');\n          const name = yield resp.text();\n\n          return name;\n        }\n      });\n\n      const nameTaskUnsubscribe = nameTask.subscribe((changed, { state }) => {\n        if (changed.state) {\n          const taskStates = this.get().taskStates;\n          this.set({\n            taskState: state,\n            taskStates: taskStates.concat([state])\n          });\n        }\n      });\n\n      this.set({ nameTask, performCount: nameTask.performCount });\n    }\n  }\n</script>\n",
    "<style>\n  .state-list {\n    max-width: 200px;\n    word-wrap: break-word;\n  }\n\n  .state {\n    padding: .25em;\n    font-size: .75rem;\n    display: inline-block;\n  }\n\n  .green {\n    color: green;\n  }\n\n  .blue {\n    color: blue;\n  }\n</style>\n\n<h3>maxConcurrency = 3</h3>\n\n<div>performCount: {performCount}</div>\n<div>droppedCount: {droppedCount}</div>\n<div>concurrency: {concurrency}</div>\n<div>instances: {taskInstances}</div>\n\n<button on:click=\"click()\">\n  pick random numbers\n</button>\n{#if taskInstances}\n<button on:click=\"cancelAll()\">\n  cancel all\n</button>\n{/if}\n\n<span>random number: {result}</span>\n\n<div class=\"state-list\">\n  <h4>task results</h4>\n  {#each states as state}\n    <span class=\"state {state.color}\">{state.value}</span>\n  {/each}\n</div>\n\n<script>\n  import { task } from '../../src/index';\n\n  export default {\n    methods: {\n      cancelAll() {\n        const { random } = this.get();\n        random.cancelAll();\n      },\n\n      click() {\n        const { random, performCount } = this.get();\n        const color = (performCount & 1) ? 'green' : 'blue';\n        this.set({ color });\n\n        const subscribe = (changed, { state, value }) => {\n          const { states } = this.get();\n\n          if (changed.value) {\n            this.set({ states: states.concat([{ value, color }]) });\n          }\n\n          if (state === 'dropped' || state === 'running') {\n            this.set({ states: states.concat([{ value: state, color }]) });\n          }\n        };\n\n        const instance = random.perform(subscribe);\n\n        this.set({\n          performCount: random.performCount,\n          droppedCount: random.droppedCount\n        });\n      }\n    },\n\n    data() {\n      return {\n        states: []\n      };\n    },\n\n    oncreate() {\n      const ctx = this;\n      const random = task(function *() {\n        try {\n          let nums = [];\n\n          for (let i = 0; i < 3; i++) {\n            nums.push(Math.floor(Math.random() * 10));\n          }\n\n          // Fake waiting\n          yield new Promise((resolve) => {\n            setTimeout(resolve, 2000);\n          });\n\n          ctx.set({\n            result: nums.join(', ')\n          });\n\n          return nums.join(', ');\n        } catch (e) {\n          console.log(e);\n        }\n      }, { maxConcurrency: 3 });\n\n      random.subscribe((changed, { concurrency, taskInstances }) => {\n        this.set({\n          concurrency: random.concurrency,\n          taskInstances: random.taskInstances.size\n        });\n      });\n\n      this.set({\n        random,\n        concurrency: random.concurrency,\n        performCount: random.performCount,\n        droppedCount: random.droppedCount\n      });\n    }\n  }\n</script>\n",
    "<style>\n  .state-list {\n    max-width: 200px;\n    word-wrap: break-word;\n  }\n\n  .state {\n    padding: .25em;\n    font-size: .75rem;\n    display: inline-block;\n  }\n\n  .green {\n    color: green;\n  }\n\n  .red {\n    color: red;\n  }\n</style>\n\n<h3>Canceling</h3>\n\n<div>performCount: {performCount}</div>\n\n<button on:click=\"click()\">\n  pick random numbers\n</button>\n{#if instance}\n<button on:click=\"cancel()\">\n  cancel\n</button>\n{/if}\n\n<span>random number: {result}</span>\n\n<div class=\"state-list\">\n  <h4>task results</h4>\n  {#each states as state}\n    <span class=\"state {state.color}\">{state.value}</span>\n  {/each}\n</div>\n\n<script>\n  import { task, timeout } from '../../src/index';\n\n  export default {\n    methods: {\n      cancel() {\n        const { instance } = this.get();\n        instance.cancel();\n      },\n\n      click() {\n        const { random, performCount } = this.get();\n        const subscribe = (changed, { state, value }) => {\n          const { states } = this.get();\n\n          if (changed.state) {\n            if (state === 'canceled') {\n              return this.set({\n                states: states.concat([{ value: state, color: 'red' }]),\n                instance: null\n              });\n            }\n\n            if (state === 'finished') {\n              return this.set({\n                states: states.concat([{ value: state, color: 'green' }]),\n                instance: null\n              });\n            }\n\n            if (state === 'running') {\n              return this.set({ states: states.concat([{ value: state, color: 'green' }]) });\n            }\n          }\n        };\n\n        const instance = random.perform(subscribe);\n        this.set({ instance });\n\n\n        this.set({\n          performCount: random.performCount\n        });\n      }\n    },\n\n    data() {\n      return {\n        states: []\n      };\n    },\n\n    oncreate() {\n      const ctx = this;\n      const random = task(function *() {\n        try {\n          let nums = [];\n\n          for (let i = 0; i < 3; i++) {\n            nums.push(Math.floor(Math.random() * 10));\n          }\n\n          // Fake waiting\n          yield timeout(2000);\n\n          ctx.set({\n            result: nums.join(', ')\n          });\n\n          return nums.join(', ');\n        } catch (e) {\n          ctx.set({\n            result: e.cancelReason\n          });\n        }\n      });\n\n\n      this.set({\n        random,\n        performCount: random.performCount\n      });\n    }\n  }\n</script>\n",
    "<div class=\"nav\">\n  {#each pages as page}\n    <div class=\"link {active === page.component ? 'active' : ''}\" on:click=\"fire('change', page.component)\">\n      {page.title}\n    </div>\n  {/each}\n</div>\n\n<style>\n  .nav {\n    grid-area: nav;\n  }\n\n  .link {\n    padding: .25em;\n    cursor: pointer;\n  }\n\n  .active,\n  .link:hover {\n    text-decoration: underline;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAWE,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,mBAAmB,CACjB,aAAa;MACb,UAAU,CACZ,qBAAqB,CAAE,GAAG,CAAC,GAAG,AAEhC,CAAC,AAED,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,CAAC,CAAC,GAAG,AAChB,CAAC;AC1BD,WAAW,eAAC,CAAC,AACX,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,UAAU,AACvB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,YAAY,AACvB,CAAC;ACTD,WAAW,cAAC,CAAC,AACX,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,UAAU,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC;ACjBD,WAAW,cAAC,CAAC,AACX,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,UAAU,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,AACd,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,AACZ,CAAC;ACTD,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,GAAG,AAChB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,qBAAO,CACP,mBAAK,MAAM,AAAC,CAAC,AACX,eAAe,CAAE,SAAS,AAC5B,CAAC"
}